// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// compute_response
NumericVector compute_response(const LogicalVector& good, const NumericVector& eta, const NumericVector& y, const NumericVector& mu, const NumericVector& mu_eta_val);
RcppExport SEXP _bvs_compute_response(SEXP goodSEXP, SEXP etaSEXP, SEXP ySEXP, SEXP muSEXP, SEXP mu_eta_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalVector& >::type good(goodSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu_eta_val(mu_eta_valSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_response(good, eta, y, mu, mu_eta_val));
    return rcpp_result_gen;
END_RCPP
}
// compute_weights
NumericVector compute_weights(const LogicalVector& good, const NumericVector& weights, const NumericVector& mu_eta_val, const NumericVector& mu, const NumericVector& varmu);
RcppExport SEXP _bvs_compute_weights(SEXP goodSEXP, SEXP weightsSEXP, SEXP mu_eta_valSEXP, SEXP muSEXP, SEXP varmuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalVector& >::type good(goodSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu_eta_val(mu_eta_valSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type varmu(varmuSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_weights(good, weights, mu_eta_val, mu, varmu));
    return rcpp_result_gen;
END_RCPP
}
// identity_mu_eta
void identity_mu_eta(const NumericVector& eta, NumericVector& eta_val);
RcppExport SEXP _bvs_identity_mu_eta(SEXP etaSEXP, SEXP eta_valSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type eta_val(eta_valSEXP);
    identity_mu_eta(eta, eta_val);
    return R_NilValue;
END_RCPP
}
// logit_mu_eta
void logit_mu_eta(const NumericVector& eta, NumericVector& eta_val);
RcppExport SEXP _bvs_logit_mu_eta(SEXP etaSEXP, SEXP eta_valSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type eta_val(eta_valSEXP);
    logit_mu_eta(eta, eta_val);
    return R_NilValue;
END_RCPP
}
// logit_deviance
double logit_deviance(const NumericVector& y, const NumericVector& mu, const NumericVector& wt);
RcppExport SEXP _bvs_logit_deviance(SEXP ySEXP, SEXP muSEXP, SEXP wtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type wt(wtSEXP);
    rcpp_result_gen = Rcpp::wrap(logit_deviance(y, mu, wt));
    return rcpp_result_gen;
END_RCPP
}
// logit_linkinv
void logit_linkinv(const NumericVector& eta, NumericVector& mu);
RcppExport SEXP _bvs_logit_linkinv(SEXP etaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mu(muSEXP);
    logit_linkinv(eta, mu);
    return R_NilValue;
END_RCPP
}
// new_table
Rcpp::XPtr< std::unordered_map< std::string, int > > new_table(int i);
RcppExport SEXP _bvs_new_table(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(new_table(i));
    return rcpp_result_gen;
END_RCPP
}
// set_element_in_table
void set_element_in_table(std::string key, int value, Rcpp::XPtr< std::unordered_map< std::string , int > > table);
RcppExport SEXP _bvs_set_element_in_table(SEXP keySEXP, SEXP valueSEXP, SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr< std::unordered_map< std::string , int > > >::type table(tableSEXP);
    set_element_in_table(key, value, table);
    return R_NilValue;
END_RCPP
}
// get_element_from_table
int get_element_from_table(std::string key, Rcpp::XPtr< std::unordered_map< std::string , int > > table);
RcppExport SEXP _bvs_get_element_from_table(SEXP keySEXP, SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr< std::unordered_map< std::string , int > > >::type table(tableSEXP);
    rcpp_result_gen = Rcpp::wrap(get_element_from_table(key, table));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP Cdqrls(SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_bvs_compute_response", (DL_FUNC) &_bvs_compute_response, 5},
    {"_bvs_compute_weights", (DL_FUNC) &_bvs_compute_weights, 5},
    {"_bvs_identity_mu_eta", (DL_FUNC) &_bvs_identity_mu_eta, 2},
    {"_bvs_logit_mu_eta", (DL_FUNC) &_bvs_logit_mu_eta, 2},
    {"_bvs_logit_deviance", (DL_FUNC) &_bvs_logit_deviance, 3},
    {"_bvs_logit_linkinv", (DL_FUNC) &_bvs_logit_linkinv, 2},
    {"_bvs_new_table", (DL_FUNC) &_bvs_new_table, 1},
    {"_bvs_set_element_in_table", (DL_FUNC) &_bvs_set_element_in_table, 3},
    {"_bvs_get_element_from_table", (DL_FUNC) &_bvs_get_element_from_table, 2},
    {"Cdqrls",                      (DL_FUNC) &Cdqrls,                      5},
    {NULL, NULL, 0}
};

RcppExport void R_init_bvs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
